<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.std.dao.StdTestDao">

   <!-- 수강 목록 조회 -->
   <select id="testLectureList" resultType="kr.happyjob.study.std.model.StdTestModel">
      /*kr.happyjob.study.std.dao.LectureListDAO.testLectureList*/      
      select (@rownum := @rownum + 1) as num 
      		 , ts.lecture_seq
      		 , dc.detail_name as lecture_name
     		 , ts.loginID
   		     , ui.name as teacher_name
   		     , lc.lecture_start
   		     , lc.lecture_end
   		     , ts.student_test
  		     , ifnull(a.score, 0) as score
  	  from (select @rownum := 0) tmp, tb_student ts
      	inner join tb_lecture lc ON lc.lecture_seq = ts.lecture_seq and lc.lecture_confirm="N"
      	inner join tb_userinfo ui on ui.loginID = lc.loginID
      	inner join tb_detail_code dc on dc.group_code = 'lecture_no' and dc.detail_code = lc.lecture_no
    	left outer join (
                      	select tr.lecture_seq
                           	 , tr.loginID
                             , sum(tq.question_score) as score
                        from tb_result tr
                        	inner join tb_question tq on tr.test_no = tq.test_no 
                        		   and tr.result_answer = tq.question_answer 
                        		   and tr.question_no = tq.question_no
                        group by tr.lecture_seq, tr.loginID
                    ) a on ts.lecture_seq = a.lecture_seq and ts.loginID = a.loginID
                    
        <where>
    	<if test="(search != null) and (!search.equals(''))">
			<choose>
				<when test="select eq 'lecture'.toString()">
					AND dc.detail_name Like CONCAT('%',#{search},'%')
				</when>
				<when test="select eq 'name'.toString()">
					and ui.name Like CONCAT('%',#{search},'%')
				</when>
				<otherwise>
                    and ( 
                          dc.detail_name Like CONCAT('%',#{search},'%')
                       or ui.name Like CONCAT('%',#{search},'%')
                       )
                  </otherwise>	
			</choose>
		</if>
			and ts.loginID = #{loginID} and ts.student_lecture = 'Y'
		</where>
    	order by num asc
       LIMIT #{StratNum}, #{pageSize}
   </select>
   
   <!-- 수강 목록 총 갯수 조회 -->
   <select id="testLectureListCnt" resultType="int">
      /*kr.happyjob.study.std.dao.LectureListDAO.lectureListCnt*/      
     select   count(DISTINCT ts.lecture_seq)
  		from (select @rownum := 0) tmp, tb_student ts
      	inner join tb_lecture lc ON lc.lecture_seq = ts.lecture_seq and lc.lecture_confirm="N"
      	inner join tb_userinfo ui on ui.loginID = lc.loginID
      	inner join tb_detail_code dc on dc.group_code = 'lecture_no' and dc.detail_code = lc.lecture_no
    	left outer join (
                      	select tr.lecture_seq
                           	 , tr.loginID
                             , sum(tq.question_score) as score
                        from tb_result tr
                        	inner join tb_question tq on tr.test_no = tq.test_no 
                        		   and tr.result_answer = tq.question_answer 
                        		   and tr.question_no = tq.question_no
                        group by tr.lecture_seq, tr.loginID
                    ) a on ts.lecture_seq = a.lecture_seq and ts.loginID = a.loginID
    	<where>
    	<if test="(search != null) and (!search.equals(''))">
			<choose>
				<when test="select eq 'lecture'.toString()">
					AND dc.detail_name Like CONCAT('%',#{search},'%')
				</when>
				<when test="select eq 'name'.toString()">
					and ui.name Like CONCAT('%',#{search},'%')
				</when>
				<otherwise>
                    and ( 
                          dc.detail_name Like CONCAT('%',#{search},'%')
                       or ui.name Like CONCAT('%',#{search},'%')
                       )
                  </otherwise>	
			</choose>
		</if>
			and ts.loginID = #{loginID} and ts.student_lecture = 'Y'
		</where>
   </select>
   
   <!-- 시험 문제 불러오기 -->
   <select id="testQuestion" resultType="kr.happyjob.study.std.model.StdTestModel">
      /*kr.happyjob.study.std.dao.LectureListDAO.testQuestion*/      
      select  qu.question_no
      		, qu.question_ex
      		, qu.question_one
      		, qu.question_two
      		, qu.question_three
      		, qu.question_four
      		, qu.test_no
      		, lc.lecture_seq
	  from tb_lecture lc 
		  inner join tb_question qu on lc.test_no = qu.test_no
	  where lc.lecture_seq = #{lecture_seq}
   </select>
   
   <!-- 시험 문제 총 갯수 조회 -->
   <select id="testQuestionCnt" resultType="int">
      /*kr.happyjob.study.std.dao.LectureListDAO.testQuestionCnt*/      
     select   count(*)
  		from tb_lecture lc 
		  inner join tb_question qu on lc.test_no = qu.test_no
	  where lc.lecture_seq = #{lecture_seq}
   </select>
   
   <!-- 시험 문제 저장 -->
   <insert id="saveQuestion">
   	insert into tb_result
				(   lecture_seq
				  , test_no
				  , loginID
				  , question_no
				  , result_answer
				)
		values (
					#{lecture_seq}
				  , #{test_no}
				  , #{loginID}
				  , #{question_no}
				  , #{result_answer}
				)
   </insert>
   
   <!-- 학생 시험 여부 업데이트 -->
   <update id="updateStudent">
   	update tb_student
			set student_test = 'Y'
		where loginID = #{loginID} and lecture_seq = #{lecture_seq}
   
   </update>
   
</mapper>